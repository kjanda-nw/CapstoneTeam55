f9exp11 <-sum(eigenfun$values[1:19])
f9exp11 <-sum(eigenfun$values[1:19])/totvar
f9exp11
#Q2 run factor analysis for eigenvalues greater than 1 rule
factors_data <- fa(r=corm, nfactors=7)
install.packages("GPArotation")
#Q2 run factor analysis for eigenvalues greater than 1 rule
factors_data <- fa(r=corm, nfactors=7)
factors_data$loadings
#Q2 run factor analysis for eigenvalues greater than 1 rule
factors_data <- fa(r=corm, rotate="varimax" nfactors=7)
#Q2 run factor analysis for eigenvalues greater than 1 rule
factors_data <- fa(r=corm, rotate="varimax", nfactors=7)
factors_data$loadings
#Q2 run factor analysis for eigenvalues greater than 1 rule
factors_data <- fa(r=corm, rotate="varimax",fm="ml" nfactors=7)
#Q2 run factor analysis for eigenvalues greater than 1 rule
factors_data <- fa(r=corm, rotate="varimax",fm="ml", nfactors=7)
factors_data$loadings
#Q2 run factor analysis for eigenvalues greater than 1 rule
fit <- factanal(f, 7, rotation="varimax")
print(fit, digits=2, cutoff=.3, sort=TRUE)
# plot factor 1 by factor 2
load <- fit$loadings[,1:2]
plot(load,type="n") # set up plot
text(load,labels=names(mydata),cex=.7) # add variable names
text(load,labels=names(f),cex=.7) # add variable names
#Q3 same as above but with PROMAX rotation
fit2 <- factanal(f, 7, rotation = "promax")
print(fit2, digits = 3,  sort=TRUE)
print(fit2, digits = 3, cutoff=0.3 sort=TRUE)
print(fit2, digits = 3, cutoff=0.3, sort=TRUE)
#repeat q2 for 1-num
x<-seq(1,19)
#repeat q2 for 1-num
x<-seq(1,19)
for (val in x) {
fith <- factanal(f, x, rotation="varimax")
print(fit, digits=2, cutoff=.3, sort=TRUE)
}
fith <- factanal(f, val, rotation="varimax")
#repeat q2 for 1-num
x<-seq(1,19)
for (val in x) {
fith <- factanal(f, val, rotation="varimax")
print(fit, digits=2, cutoff=.3, sort=TRUE)
}
for (val in x) {
fith <- factanal(f, val, rotation="varimax")
print(fith, digits=2, cutoff=.3, sort=TRUE)
}
#Q6 fit the 5-factor model
fit2 <- factanal(f, 5, rotation = "promax")
print(fit2, digits = 3, cutoff=0.3, sort=TRUE)
View(fit2)
fit2[["factors"]]
fit2[["loadings"]]
#Assigment 2: Exploratory Factor Analysis
#MSDS 411
#read in the data
#install.packages("psych")
library(psych)
bfi_data2=bfi
#Examine the data
summary(bfi_data2)
#drop cases with NAs
bfi_data <- bfi_data2[complete.cases(bfi_data2),]
#20 times number of variables states that we need 25*20=500 cases and we have 2236 so we are good
#create correlation matrix
f <- bfi_data[ , 1:25]
co <- cor(f)
corm <- as.matrix(co)
isSymmetric(corm)
#look at corrplot
require(corrplot)
corrplot(co)
#Q1 obtain the eigenvalues and eigenvectors
eigenfun <- eigen(corm)
eigenfun$values
eigenfun$vectors
scree(corm,pc=FALSE)
#with scree plot retain 7, with eigenvalue greater than 1 retain 7, retain 19 for variance cover
fa.parallel(corm, n.obs=600, fa="both", n.iter=100, show.legend=TRUE,main="Scree plot with parallel analysis")
eigenfun$values
eigenfun$vectors
#calc tot var
eigenfun$value[1]
#calc tot var
eigenfun$value[1]/25
eigenfun$value[1]/25
eigenfun$value[2]/25
eigenfun$value[3]/25
eigenfun$value[4]/25
eigenfun$value[5]/25
eigenfun$value[6]/25
eigenfun$value[7]/25
co
#Q1 obtain the eigenvalues and eigenvectors
eigenfun <- eigen(corm)
eigenfun$values
eigenfun$vectors
#with scree plot retain 6, with eigenvalue greater than 1 retain 6, retain 7 for variance cover
fa.parallel(corm, n.obs=600, fa="both", n.iter=100, show.legend=TRUE,main="Scree plot with parallel analysis")
sum(eigenfun$values[1:20]/25)
sum(eigenfun$values[1:19]/25)
sum(eigenfun$values[1:18]/25)
eigenfun$values
#Q2 run factor analysis for eigenvalues greater than 1 rule
fit <- factanal(f, 6, rotation="varimax")
print(fit, digits=2, cutoff=.3, sort=TRUE)
fit
print(fit2, digits = 3, cutoff=1.0, sort=TRUE)
print(fit, digits=2, cutoff=1.0, sort=TRUE)
.3
print(fit, digits=2, cutoff=.3, sort=TRUE)
print(fit, digits=2, sort=TRUE)
#Q3 same as above but with PROMAX rotation
fit2 <- factanal(f, 7, rotation = "promax")
print(fit, digits=2, cutoff=.3, sort=TRUE)
print(fit, digits=3, sort=TRUE)
#repeat q2 for 1-num
x<-seq(1,6)
for (val in x) {
fith <- factanal(f, val, rotation="varimax")
print(fith, digits=2, cutoff=.3, sort=TRUE)
}
print(fit, digits=3, sort=TRUE)
,
print(fit2, digits = 3, sort=TRUE)
#Q3 same as above but with PROMAX rotation
fit2 <- factanal(f, 6, rotation = "promax")
print(fit2, digits = 3, sort=TRUE)
#repeat q2 for 1-num
x<-seq(1,6)
#repeat q2 for 1-num
x<-seq(1,6)
for (val in x) {
fith <- factanal(f, val, rotation="varimax")
print(fith, digits=3, sort=TRUE)
}
#Assigment 2: Exploratory Factor Analysis
#MSDS 411
#read in the data
#install.packages("psych")
library(psych)
bfi_data2=bfi
#Examine the data
summary(bfi_data2)
#drop cases with NAs
bfi_data <- bfi_data2[complete.cases(bfi_data2),]
#20 times number of variables states that we need 25*20=500 cases and we have 2236 so we are good
#create correlation matrix
f <- bfi_data[ , 1:25]
co <- cor(f)
corm <- as.matrix(co)
isSymmetric(corm)
#look at corrplot
require(corrplot)
corrplot(co)
#Q1 obtain the eigenvalues and eigenvectors
eigenfun <- eigen(corm)
eigenfun$values
eigenfun$vectors
scree(corm,pc=FALSE)
#with scree plot retain 6, with eigenvalue greater than 1 retain 6, retain 7 for variance cover
fa.parallel(corm, n.obs=600, fa="both", n.iter=100, show.legend=TRUE,main="Scree plot with parallel analysis")
ap <- parallel(subject=nrow(f),var=ncol(f),
rep=100,cent=.05)
nS <- nScree(x=eigenfun$values, aparallel=ap$eigen$qevpea)
plotnScree(nS)
#calc tot var
eigenfun$value[1]/25
eigenfun$value[2]/25
eigenfun$value[3]/25
eigenfun$value[4]/25
eigenfun$value[5]/25
eigenfun$value[6]/25
eigenfun$value[7]/25
#Q2 run factor analysis for eigenvalues greater than 1 rule
fit <- factanal(f, 6, rotation="varimax")
print(fit, digits=3, sort=TRUE)
# plot factor 1 by factor 2
load <- fit$loadings[,1:2]
plot(load,type="n") # set up plot
text(load,labels=names(f),cex=.7) # add variable names
#Q3 same as above but with PROMAX rotation
fit2 <- factanal(f, 6, rotation = "promax")
print(fit2, digits = 3, sort=TRUE)
#repeat q2 for 1-num
x<-seq(1,6)
for (val in x) {
fith <- factanal(f, val, rotation="varimax")
print(fith, digits=3, sort=TRUE)
}
fitc <- factanal(f, 1, rotation="varimax")
View(fith)
View(fitc)
fitc[["loadings"]]
#read in the data
#install.packages("psych")
library(psych)
bfi_data2=bfi
#Examine the data
summary(bfi_data2)
#drop cases with NAs
bfi_data <- bfi_data2[complete.cases(bfi_data2),]
#20 times number of variables states that we need 25*20=500 cases and we have 2236 so we are good
#create correlation matrix
f <- bfi_data[ , 1:25]
co <- cor(f)
corm <- as.matrix(co)
isSymmetric(corm)
#look at corrplot
require(corrplot)
corrplot(co)
#Q1 obtain the eigenvalues and eigenvectors
eigenfun <- eigen(corm)
eigenfun$values
eigenfun$vectors
scree(corm,pc=FALSE)
#with scree plot retain 6, with eigenvalue greater than 1 retain 6, retain 7 for variance cover
fa.parallel(corm, n.obs=600, fa="both", n.iter=100, show.legend=TRUE,main="Scree plot with parallel analysis")
ap <- parallel(subject=nrow(f),var=ncol(f),
rep=100,cent=.05)
nS <- nScree(x=eigenfun$values, aparallel=ap$eigen$qevpea)
plotnScree(nS)
#calc tot var
eigenfun$value[1]/25
eigenfun$value[2]/25
eigenfun$value[3]/25
eigenfun$value[4]/25
eigenfun$value[5]/25
eigenfun$value[6]/25
eigenfun$value[7]/25
#Q2 run factor analysis for eigenvalues greater than 1 rule
fit <- factanal(f, 6, rotation="varimax")
print(fit, digits=3, sort=TRUE)
# plot factor 1 by factor 2
load <- fit$loadings[,1:2]
plot(load,type="n") # set up plot
text(load,labels=names(f),cex=.7) # add variable names
#Q3 same as above but with PROMAX rotation
fit2 <- factanal(f, 6, rotation = "promax")
print(fit2, digits = 3, sort=TRUE)
#repeat q2 for 1-num
x<-seq(1,19)
for (val in x) {
fith <- factanal(f, val, rotation="varimax")
print(fith, digits=3, sort=TRUE)
}
#Q6 fit the 5-factor model
fit2 <- factanal(f, 5, rotation = "promax")
#Q6 fit the 5-factor model
fit2 <- factanal(f, 5, rotation = "varimax")
print(fit2, digits = 3, cutoff=0.3, sort=TRUE)
View(fit2)
factor_scores <- factor.scores(f,fit2)
View(factor_scores)
fs <- factor_scores$scores
bf2 <- cbind(bfi_data,fs)
View(bf2)
View(bf2)
#do anova
a_gen <- aov(gender~Factor1+Factor2+Factor3+Factor4+Factor5, data=bf2)
summary(a_gen)
boxplot(bf2$Factor1~bf2$gender)
boxplot(bf2$Factor1~bf2$gender,title="Boxplot of Factor 1 by Gender",col=c("blue","red"))
boxplot(bf2$Factor1~bf2$gender,main="Boxplot of Factor 1 by Gender",col=c("blue","red"))
par(mfrow=c(2,3))
boxplot(bf2$Factor1~bf2$gender,main="Boxplot of Factor 1 by Gender",col=c("blue","red"))
boxplot(bf2$Factor2~bf2$gender,main="Boxplot of Factor 2 by Gender",col=c("blue","red"))
boxplot(bf2$Factor3~bf2$gender,main="Boxplot of Factor 3 by Gender",col=c("blue","red"))
boxplot(bf2$Factor4~bf2$gender,main="Boxplot of Factor 4 by Gender",col=c("blue","red"))
boxplot(bf2$Factor5~bf2$gender,main="Boxplot of Factor 5 by Gender",col=c("blue","red"))
par(mfrow=c(3,2))
boxplot(bf2$Factor1~bf2$gender,main="Boxplot of Factor 1 by Gender",col=c("blue","red"))
boxplot(bf2$Factor2~bf2$gender,main="Boxplot of Factor 2 by Gender",col=c("blue","red"))
boxplot(bf2$Factor3~bf2$gender,main="Boxplot of Factor 3 by Gender",col=c("blue","red"))
boxplot(bf2$Factor4~bf2$gender,main="Boxplot of Factor 4 by Gender",col=c("blue","red"))
boxplot(bf2$Factor5~bf2$gender,main="Boxplot of Factor 5 by Gender",col=c("blue","red"))
View(bf2)
par(mfrow=c(2,3))
boxplot(bf2$Factor1~bf2$gender,main="Boxplot of Factor 1 by Gender",col=c("blue","red"))
boxplot(bf2$Factor2~bf2$gender,main="Boxplot of Factor 2 by Gender",col=c("blue","red"))
boxplot(bf2$Factor3~bf2$gender,main="Boxplot of Factor 3 by Gender",col=c("blue","red"))
boxplot(bf2$Factor4~bf2$gender,main="Boxplot of Factor 4 by Gender",col=c("blue","red"))
boxplot(bf2$Factor5~bf2$gender,main="Boxplot of Factor 5 by Gender",col=c("blue","red"))
boxplot(bf2$Factor3~bf2$gender,main="Boxplot of Factor 3 \nby Gender",col=c("blue","red"))
par(mfrow=c(2,3))
boxplot(bf2$Factor1~bf2$gender,main="Boxplot of Factor 1 \nby Gender",col=c("blue","red"))
boxplot(bf2$Factor2~bf2$gender,main="Boxplot of Factor 2 \nby Gender",col=c("blue","red"))
boxplot(bf2$Factor3~bf2$gender,main="Boxplot of Factor 3 \nby Gender",col=c("blue","red"))
boxplot(bf2$Factor4~bf2$gender,main="Boxplot of Factor 4 \nby Gender",col=c("blue","red"))
boxplot(bf2$Factor5~bf2$gender,main="Boxplot of Factor 5 \nby Gender",col=c("blue","red"))
boxplot(bf2$Factor1~bf2$education,main="Boxplot of Factor 1 \nby education",col=c("blue","red"))
boxplot(bf2$Factor2~bf2$education,main="Boxplot of Factor 2 \nby education",col=c("blue","red"))
boxplot(bf2$Factor3~bf2$education,main="Boxplot of Factor 3 \nby education",col=c("blue","red"))
boxplot(bf2$Factor4~bf2$education,main="Boxplot of Factor 4 \nby education",col=c("blue","red"))
boxplot(bf2$Factor5~bf2$education,main="Boxplot of Factor 5 \nby education",col=c("blue","red"))
par(mfrow=c(2,3))
boxplot(bf2$Factor1~bf2$education,main="Boxplot of Factor 1 \nby education",col=c("blue","red"))
boxplot(bf2$Factor2~bf2$education,main="Boxplot of Factor 2 \nby education",col=c("blue","red"))
boxplot(bf2$Factor3~bf2$education,main="Boxplot of Factor 3 \nby education",col=c("blue","red"))
boxplot(bf2$Factor4~bf2$education,main="Boxplot of Factor 4 \nby education",col=c("blue","red"))
boxplot(bf2$Factor5~bf2$education,main="Boxplot of Factor 5 \nby education",col=c("blue","red"))
plot(bf2$Factor5~bf2$age)
par(mfrow=c(2,3))
plot(bf2$Factor1~bf2$age,main="Boxplot of Factor 1 \nby age")
plot(bf2$Factor2~bf2$age,main="Boxplot of Factor 2 \nby age")
plot(bf2$Factor3~bf2$age,main="Boxplot of Factor 3 \nby age")
plot(bf2$Factor4~bf2$age,main="Boxplot of Factor 4 \nby age")
plot(bf2$Factor5~bf2$age,main="Boxplot of Factor 5 \nby age")
par(mfrow=c(2,3))
plot(bf2$Factor1~bf2$age,main="Boxplot of Factor 1 \nby age")
legend(x='bottomright', legend=paste('Cor =',round(cor(bf2$age, bf2$Factor1),2)))
par(mfrow=c(2,3))
plot(bf2$Factor1~bf2$age,main="Boxplot of Factor 1 \nby age")
legend(x='bottomright', legend=paste('Cor =',round(cor(bf2$age, bf2$Factor1),2)))
plot(bf2$Factor2~bf2$age,main="Boxplot of Factor 2 \nby age")
legend(x='bottomright', legend=paste('Cor =',round(cor(bf2$age, bf2$Factor2),2)))
plot(bf2$Factor3~bf2$age,main="Boxplot of Factor 3 \nby age")
legend(x='bottomright', legend=paste('Cor =',round(cor(bf2$age, bf2$Factor3),2)))
plot(bf2$Factor4~bf2$age,main="Boxplot of Factor 4 \nby age")
legend(x='bottomright', legend=paste('Cor =',round(cor(bf2$age, bf2$Factor4),2)))
plot(bf2$Factor5~bf2$age,main="Boxplot of Factor 5 \nby age")
legend(x='bottomright', legend=paste('Cor =',round(cor(bf2$age, bf2$Factor5),2)))
#do anova
a_gen <- aov(gender~Factor1+Factor2+Factor3+Factor4+Factor5, data=bf2)
summary(a_gen)
a_gen <- aov(education~Factor1+Factor2+Factor3+Factor4+Factor5, data=bf2)
summary(a_gen)
TukeyHSD(a_gen, which="Factor5")
#do anova
a_gen <- aov(Factor1~gender, data=bf2)
summary(a_gen)
a_gen <- aov(Factor1~education, data=bf2)
summary(a_gen)
a_gen <- aov(Factor5~education, data=bf2)
summary(a_gen)
TukeyHSD(a_gen, which="education")
#do anova
a_gen <- aov(Factor1~gender, data=bf2)
summary(a_gen)
#do anova
h <- function(x1,x2) {
f <- lm(x1~x2,data=bf2)
summary(f)
}
h(Factor1,gender)
#do anova
h <- function(x1,x2) {
f <- lm(substitue(x1)~substitue(x2),data=bf2)
summary(f)
}
h(Factor1,gender)
#do anova
h <- function(x1,x2) {
f <- lm(substitute(x1)~substitute(x2),data=bf2)
summary(f)
}
h(Factor1,gender)
#do anova
h <- function(df, x1,x2) {
f <- lm(substitute(x1)~substitute(x2),data=df)
summary(f)
}
h(bf2,Factor1,gender)
#do anova
h <- function(df, x1,x2) {
f <- lm(df$x1~df$x2)
summary(f)
}
h(bf2,"Factor1","gender")
summary(f)
#do anova
f<-lm(Factor1~gender,data=bf2)
summary(f)
f<-lm(Factor1~gender,data=bf2)
summary(f)
f<-lm(Factor2~gender,data=bf2)
summary(f)
f<-lm(Factor3~gender,data=bf2)
summary(f)
f<-lm(Factor4~gender,data=bf2)
summary(f)
f<-lm(Factor5~gender,data=bf2)
summary(f)
a_ed <-anova(education~Factor1+Factor2+Factor3+Factor4+Factor5, data=bf2)
a_ed <-anova(education~Factor1+Factor2+Factor3+Factor4+Factor5, data=bf2)
a_ed <-aov(education~Factor1+Factor2+Factor3+Factor4+Factor5, data=bf2)
summary(a_ed)
f<-lm(Factor1~education,data=bf2)
summary(f)
f<-lm(Factor1~education,data=bf2)
summary(f)
f<-lm(Factor1~education,data=bf2)
summary(f)
f<-lm(Factor1~education,data=bf2)
summary(f)
f<-lm(Factor1~education,data=bf2)
summary(f)
f<-lm(Factor1~education,data=bf2)
summary(f)
f<-lm(Factor2~education,data=bf2)
summary(f)
f<-lm(Factor3~education,data=bf2)
summary(f)
f<-lm(Factor4~education,data=bf2)
summary(f)
f<-lm(Factor5~education,data=bf2)
summary(f)
f<-lm(Factor1~age,data=bf2)
summary(f)
f<-lm(Factor2~age,data=bf2)
summary(f)
f<-lm(Factor3~age,data=bf2)
summary(f)
f<-lm(Factor4~age,data=bf2)
summary(f)
f<-lm(Factor5~age,data=bf2)
summary(f)
install.packages("shiny")
#import libraries
library(shiny)
runExample("01_hello")
runApp('Documents/MSDS498/CapstoneTeam55/MobileApp')
runApp('Documents/MSDS498/CapstoneTeam55/MobileApp')
runApp('Documents/MSDS498/CapstoneTeam55/MobileApp')
runApp('Documents/MSDS498/CapstoneTeam55/MobileApp')
runApp('Documents/MSDS498/CapstoneTeam55/MobileApp')
runApp('Documents/MSDS498/CapstoneTeam55/MobileApp')
runApp('Documents/MSDS498/CapstoneTeam55/MobileApp')
runApp('Documents/MSDS498/CapstoneTeam55/MobileApp')
runApp('Documents/MSDS498/CapstoneTeam55/MobileApp')
runApp('Documents/MSDS498/CapstoneTeam55/MobileApp')
runApp('Documents/MSDS498/CapstoneTeam55/MobileApp')
install.packages("tidyverse")
runApp('Documents/MSDS498/CapstoneTeam55/MobileApp')
runApp('Documents/MSDS498/CapstoneTeam55/MobileApp')
runApp('Documents/MSDS498/CapstoneTeam55/MobileApp')
install.packages('rsconnect')
https://deanattali.com/blog/building-shiny-apps-tutorial/
rsconnect::setAccountInfo(name='capstone-team-55-foresttracker', token='C963943086B45513A7522C267F7A9F5A', secret='S3FbwgQArisLBUotV7J9TXMZ09wHGgegcEyr9FBE')
shiny::runApp('Documents/MSDS498/CapstoneTeam55/MobileApp')
shiny::runApp('Documents/MSDS498/CapstoneTeam55/MobileApp')
runApp('Documents/MSDS498/CapstoneTeam55/MobileApp')
runApp('Documents/MSDS498/CapstoneTeam55/MobileApp')
runApp('Documents/MSDS498/CapstoneTeam55/MobileApp')
runApp('Documents/MSDS498/CapstoneTeam55/MobileApp')
ind <- read.csv("Combined_1991_2021_Adj.csv", stringsAsFactors = FALSE)
ind <- read.csv("Combined_1991_2021_Adj.csv", stringsAsFactors = FALSE)
setwd("~/Documents/MSDS498/CapstoneTeam55/MobileApp")
ind <- read.csv("Combined_1991_2021_Adj.csv", stringsAsFactors = FALSE)
ind %>%
filter(yr >= input$yrInput[1],
yr <= input$yrInput[2],
countryname %in% input$countryInput
) %>% subset(select=c('yr','countryname',input$fplot_var,input$plot_var))
ind %>%
filter(yr >= 2013,
yr <= 2016,
countryname %in% "Brazil"
) %>% subset(select=c('yr','countryname',"forest_change","gdp"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ind <- read.csv("Combined_1991_2021_Adj.csv", stringsAsFactors = FALSE)
ind %>%
filter(yr >= 2013,
yr <= 2016,
countryname %in% "Brazil"
) %>% subset(select=c('yr','countryname',"forest_change","gdp"))
ftd <- melt(ind, id.vars = c("yr","countryname","Sub.Regions"))
ind <- read.csv("Combined_1991_2021_Adj.csv", stringsAsFactors = FALSE)
ind %>%
filter(yr >= 2013,
yr <= 2016,
countryname %in% "Brazil"
) %>% subset(select=c('yr','countryname',"forest_change","gdp"))
ftd <- melt(ind, id.vars = c("yr","countryname","Sub.Regions"))
View(ftd)
ftd %>%
filter(yr >= 2013,
yr <= 2021,
countryname %in% "Brazil",
variable == gdp
)
ftd %>%
filter(yr >= 2013,
yr <= 2021,
countryname %in% "Brazil",
variable == 'gdp'
)
runApp()
runApp()
View(ftd)
runApp()
runApp()
runApp()
runApp()
runApp()
countries <- ind[,names(ind) %in% c("countryname","Sub.Regions")]
countries2 <- unique(countries)
View(countries2)
split(countries2$Sub.Regions,countries2$countryname)
runApp()
runApp()
